buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:$FORGEGRADLE_VERSION"
        classpath "org.ajoberstar:gradle-git:$GRADLEGIT_VERSION"
    }
}

import org.ajoberstar.grgit.*
apply from: 'gradle/functions.gradle'
apply plugin: 'grgit-release'

release {
    try {
        grgit = Grgit.open(project.file('.'))
    }
    catch (Exception e)
    {
        project.version = MOD_VERSION
    }
    version {
        untaggedStages = ['snapshot'] as SortedSet
        taggedStages = ['beta', 'rc'] as SortedSet
        useBuildMetadataForStage = { stage -> stage == 'snapshot' }
    }
    generateTagMessage = project.ext.tagMessage
    releaseTasks = ['commitVersion']
}


apply plugin: 'forge'

group= MOD_ID // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "$MOD_ID-$MINECRAFT_VERSION".toLowerCase()


minecraft {
    version = "$MINECRAFT_VERSION-$FORGE_VERSION"
    replaceIn('src/main/java/astronomia/core/AstroProps.java')
    replace('Astronomia Mod', MOD_NAME)
    replace('Astronomia', MOD_ID)
    replace('99.99.99', project.ext.CoFHVersion(project.version))
    replace(/"1.7.10"/, /"${MINECRAFT_VERSION}\"/)
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version.toString()
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'modid':MOD_ID, 'modname':MOD_NAME, 'moddescription':MOD_DESCRIPTION, \
               'modversion':project.ext.CoFHVersion(project.version), \
               'mcversion':project.minecraft.version, 'modurl':MOD_URL, \
               'modupdateurl':MOD_UPDATEURL, 'modauthor':MOD_AUTHOR, \
               'modcredits':MOD_CREDITS, 'modrequiredmods':MOD_REQUIREDMODS, \
               'moddependencies':MOD_DEPENDENCIES, 'moddependants':MOD_DEPENDANTS
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task commitVersion <<
{
    project.ext.updateVersion(project.version, Grgit.open(project.file('.')))
}

// Checkout CoFHCore/Lib and add it to the main source set
task checkoutCoFH <<
{
   project.ext.gitClone('src/cofh/lib', COFHLIB_URL, COFHLIB_HASH, Grgit)
   project.ext.gitClone('src/cofh/core', COFHCORE_URL, COFHCORE_HASH, Grgit)
   new File('src/cofh/core/src/main/resources/mcmod.info').delete()
}

project.tasks.compileApiJava.dependsOn checkoutCoFH

sourceSets {
   main {
      java {
         srcDir new File(project.projectDir, 'src/cofh/core/src/main/java')
         srcDir new File(project.projectDir, 'src/cofh/lib/src/main/java')
      }
      resources {
         srcDir new File(project.projectDir, 'src/cofh/core/src/main/resources')
         srcDir new File(project.projectDir, 'src/cofh/lib/src/main/resources')
      }
   }
}

// Create new jars with the CoFH libraries stripped
jar {
    baseName "combined-$MINECRAFT_VERSION"
}

task mainJar(type: Jar, dependsOn: 'reobf') {
   from sourceSets.main.output
   exclude 'cofh'
   exclude 'skyboy'
   exclude 'irclib'
   exclude 'assets/cofh'
   exclude 'CoFH_at.cfg'
   exclude 'cofhlib_at.cfg'
}

artifacts {
    archives mainJar
}

project.tasks.build.dependsOn mainJar
