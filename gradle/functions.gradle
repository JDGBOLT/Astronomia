
project.ext.tagMessage =
{ version, grgit ->
   StringBuilder builder = new StringBuilder()
    builder.append('# ' + new Date().format('yyyy-MM-dd', TimeZone.getTimeZone('GMT')) + ' - ')
    builder.append('Release of ')
    builder.append(project.ext.CoFHVersion(version))
    builder.append('\n\n')
    if (project.hasProperty('message')) builder.append(message.replace(/\n/, '\n') + '\n\n')
    builder.append(project.ext.changelog(version, grgit, CHANGELOG_ADDITION_TAG, CHANGELOG_ADDITION_MESSAGE))
    builder.append(project.ext.changelog(version, grgit, CHANGELOG_CHANGE_TAG, CHANGELOG_CHANGE_MESSAGE))
    builder.append(project.ext.changelog(version, grgit, CHANGELOG_FIX_TAG, CHANGELOG_FIX_MESSAGE))
    builder.toString()
}

project.ext.changelog = 
{ version, grgit, filter, title ->
   StringBuilder builder = new StringBuilder()
   grgit.log {
      range "${version.nearest.normal.toString()}^{commit}", 'HEAD'
      }.inject(builder)
      { bldr, commit ->
         if (commit.shortMessage.contains(filter))
         {
            builder.append(commit.getDate().format('yyyy-MM-dd') + ' | ')
            builder.append(commit.getAbbreviatedId(7) + ' | ')
            builder.append('@' + commit.author.name + ' | ')
            builder.append(commit.shortMessage + '\n')
         }
      }
      if (builder.length() != 0)
      {
         builder.insert(0, " --------- | ------- | -------- | ------\n")
         builder.insert(0, "   Date    | Commit  |  Author  | Change\n")
         builder.insert(0, "## **$title**\n")
         builder.append('\n')
      }
      return builder.toString()
}

project.ext.updateVersion =
{ version, grgit ->
   File propertiesFile = new File(project.projectDir, 'gradle.properties')
   File changelogFile = new File(project.projectDir, 'CHANGELOG.md')
   File versionFile = new File(project.projectDir, 'VERSION')
   String changelog = project.ext.tagMessage(version, grgit)
   String message = project.hasProperty('message') ? ' ' + message.replace(/\n/, '') : ''
   propertiesFile.setText(propertiesFile.getText().replaceAll(
      "MOD_VERSION=$MOD_VERSION", "MOD_VERSION=$version"))
   changelogFile.setText(changelog + '-' * 40 + '\n' + changelogFile.getText())
   versionFile.setText(project.ext.CoFHVersion(version) + message)
   grgit.add(patterns: ['gradle.properties', 'CHANGELOG.md', 'VERSION'] as Set)
   grgit.commit(message: changelog)
}

project.ext.gitClone =
{ repoPath, repoURL, hash, Grgit ->
   File repo = new File(repoPath)
   def grgit
   if (!repo.exists()) {
      grgit = Grgit.clone(dir: repo, uri: repoURL, checkout: false)
   } else {
      grgit = Grgit.open(repo)
      grgit.fetch(prune: true)
   }
   grgit.checkout(branch: hash)
}

project.ext.CoFHVersion =
{ version ->
   String result = version.toString()
   result = result.replaceAll("-beta.", "B")
   result = result.replaceAll("-rc.", "RC")
   return result
}
